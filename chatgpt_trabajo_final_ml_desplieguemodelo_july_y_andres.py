# -*- coding: utf-8 -*-
"""ChatGPT Trabajo Final_ML_DespliegueModelo_July y Andres.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m9hn5R-zWC9x5_TgiTUBTln6OMFjhOf7
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install streamlit

# prompt: Haz todo el despliegue anterior en streamlit
import os
import io
import numpy as np
import pandas as pd
import joblib

# Solo se importar√° streamlit cuando se ejecute como app
def _lazy_import_streamlit():
    import importlib
    return importlib.import_module("streamlit")

MODEL_DIR = "trained_model"
ENCODER_PATH = os.path.join(MODEL_DIR, "onehot_encoder.pkl")
SCALER_PATH = os.path.join(MODEL_DIR, "scaler.pkl")
LABEL_ENCODER_PATH = os.path.join(MODEL_DIR, "label_encoder.pkl")
MLP_MODEL_PATH = os.path.join(MODEL_DIR, "best_mlp_classifier_model.pkl")


def load_artifacts():
    artifacts = {}
    artifacts["encoder"] = joblib.load(ENCODER_PATH)
    artifacts["scaler"] = joblib.load(SCALER_PATH)
    artifacts["label_encoder"] = joblib.load(LABEL_ENCODER_PATH)
    artifacts["mlp_model"] = joblib.load(MLP_MODEL_PATH)
    return artifacts


def preprocess_data(df: pd.DataFrame, encoder, scaler):
    df = df.copy()

    # Tipar categ√≥ricas
    for col in df.select_dtypes(include="object").columns:
        df[col] = df[col].astype("category")

    # Quitar columnas no usadas (no falla si no existen)
    cols_a_borrar = [
        "Cant caja grande", "Cant caja mini", "Cant caja mediana",
        "Fecha", "Dia", "Dia de la semana", "Semana", "N¬∫ de transporte",
        "Tipo vehiculo"
    ]
    df = df.drop(columns=cols_a_borrar, errors="ignore")

    # Separar num√©ricas / no num√©ricas
    num_cols = df.select_dtypes(include=["float64", "float32", "int64", "int32"]).columns.tolist()
    cat_cols = [c for c in df.columns if c not in num_cols]

    # Escalar num√©ricas
    if len(num_cols) > 0:
        scaled = scaler.transform(df[num_cols])
        df_num_scaled = pd.DataFrame(scaled, columns=num_cols, index=df.index)
    else:
        df_num_scaled = pd.DataFrame(index=df.index)

    # Conservar categ√≥ricas
    df_cat = df[cat_cols] if len(cat_cols) > 0 else pd.DataFrame(index=df.index)

    # Concatenar y aplicar encoder
    df_for_enc = pd.concat([df_cat, df_num_scaled], axis=1)
    X_enc = encoder.transform(df_for_enc)

    # Convertir a denso si es sparse (MLP suele trabajar mejor denso)
    if hasattr(X_enc, "toarray"):
        X_enc = X_enc.toarray()

    return X_enc


def main():
    st = _lazy_import_streamlit()
    st.set_page_config(page_title="Predicci√≥n de Tipo de Veh√≠culo", layout="wide")

    st.title("üß† Predicci√≥n del Tipo de Veh√≠culo (MLP)")
    st.write("Sube un archivo **Excel (.xlsx)** con los datos de entrada. "
             "La app preprocesar√° los datos tal como en entrenamiento y generar√° las predicciones.")

    # Carga artefactos
    try:
        artifacts = load_artifacts()
    except Exception as e:
        st.error(f"No se pudieron cargar los artefactos: {e}")
        return

    uploaded_file = st.file_uploader("Sube tu archivo Excel", type=["xlsx"])

    if uploaded_file is not None:
        try:
            df = pd.read_excel(uploaded_file)
            st.subheader("Vista previa de los datos")
            st.dataframe(df.head(20))

            X_proc = preprocess_data(df, artifacts["encoder"], artifacts["scaler"])

            mlp = artifacts["mlp_model"]
            y_pred = mlp.predict(X_proc)
            y_labels = artifacts["label_encoder"].inverse_transform(y_pred)

            df_result = df.copy()
            df_result["Predicted_MLP"] = y_pred
            df_result["Predicted_Label_MLP"] = y_labels

            st.subheader("Predicciones")
            st.dataframe(df_result.head(50))

            out = io.BytesIO()
            with pd.ExcelWriter(out, engine="xlsxwriter") as writer:
                df_result.to_excel(writer, index=False, sheet_name="Predicciones")

            st.download_button(
                label="‚¨áÔ∏è Descargar resultados (Excel)",
                data=out.getvalue(),
                file_name="predicciones_mlp.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

            st.success("Predicci√≥n realizada correctamente.")

        except Exception as e:
            st.error(f"Ocurri√≥ un error al procesar el archivo: {e}")